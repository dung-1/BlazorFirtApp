@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="carousel" id="carousel-@Id">
    <div class="carousel-inner">
        @for (int i = 0; i < images.Count; i++)
        {
            <div class="carousel-item @(i == currentIndex ? "active" : "")">
                <img src="@images[i]" alt="Image @i" />
            </div>
        }
    </div>
    <div class="carousel-indicators">
        @for (int i = 0; i < images.Count; i++)
        {
            int index = i;
            <button class="carousel-indicator @(i == currentIndex ? "active" : "")"
                    @onclick="() => GoToSlide(index)"></button>
        }
    </div>
    <button class="carousel-control-prev" @onclick="Previous">
        <i class="fas fa-2x fa-solid fa-circle-chevron-left"></i>
    </button>
    <button class="carousel-control-next" @onclick="Next">
        <i class="fas fa-2x fa-solid fa-circle-chevron-right"></i>
    </button>
</div>

@code {
    private string Id = Guid.NewGuid().ToString("N");
    private List<string> images = new List<string>
    {
        "https://images.unsplash.com/photo-1550930516-af8b8cc4f871?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1000&q=80",
        "https://images.unsplash.com/photo-1550971264-3f7e4a7bb349?ixlib=rb-1.2.1&auto=format&fit=crop&w=1000&q=80",
        "https://images.unsplash.com/photo-1550931937-2dfd45a40da0?ixlib=rb-1.2.1&auto=format&fit=crop&w=1000&q=80"
    };

    private int currentIndex = 0;
    private System.Threading.Timer timer;
    private int autoPlayInterval = 5000;
    private bool isAutoPlaying = true;
    private DotNetObjectReference<Carousel> objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupCarousel", Id, objRef);
            StartAutoPlay();
        }
    }

    private void StartAutoPlay()
    {
        if (isAutoPlaying)
        {
            timer = new System.Threading.Timer(AutoPlayTick, null, autoPlayInterval, autoPlayInterval);
        }
    }

    private void StopAutoPlay()
    {
        timer?.Dispose();
        timer = null;
    }

    private void AutoPlayTick(object state)
    {
        // Need to invoke StateHasChanged on the UI thread
        InvokeAsync(() =>
        {
            Next();
            StateHasChanged();
        });
    }

    private void Next()
    {
        currentIndex = (currentIndex + 1) % images.Count;
    }

    private void Previous()
    {
        currentIndex = (currentIndex - 1 + images.Count) % images.Count;
    }

    private void GoToSlide(int index)
    {
        currentIndex = index;
    }

    [JSInvokable]
    public void PauseAutoPlay()
    {
        StopAutoPlay();
    }

    [JSInvokable]
    public void ResumeAutoPlay()
    {
        StartAutoPlay();
    }

    public void Dispose()
    {
        // Clean up timer when component is disposed
        StopAutoPlay();
        objRef?.Dispose();
    }
}
