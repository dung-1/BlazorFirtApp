@page "/checkin-okrs"
@using System.Collections.Generic
@using BlazorApp1.Common
@using BlazorApp1.Data.Models
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Rendering
@inject OkrServices okrServices
<NavMenu />
<div class="columns is-variable is-gapless" style="height:100%">
	<div class="column @(isMenuCollapsed ? "menu-collapsed is-1" : "menu-expanded is-2") has-background-white" style="border-right: 1px solid #dedede;min-height: 89vh; overflow: hidden;">
		<aside class="menu">
			<div class="level p-4">
				<div class="level-left">
					<button class="level-item" @onclick="ToggleMenu">
						<i class="fa-solid fa-bars"></i>
					</button>
				</div>
				<div class="level-right pin-container">
					<button class="level-item @(isPinned ? "pinned" : "")" @onclick="TogglePin">
						<i class="fa-solid fa-thumbtack"></i>
					</button>
				</div>
			</div>

			<ul class="menu-list m-0" style="list-style:none;font-family:sans-serif; font-size:14px">
				<li>
					<a class="has-text-grey menu-item" style="padding:13px">
						<span class="menu-icon"><i class="fa-solid fa-map-pin"></i></span>
						<span class="menu-text">Góp ý mục tiêu</span>
					</a>
				</li>
				<li>
					<a class="has-text-grey menu-item" style="padding:13px">
						<span class="menu-icon"><i class="fa-solid fa-location-crosshairs"></i></span>
						<span class="menu-text">OKRs của tôi</span>
					</a>
				</li>
				<li>
					<a class="has-text-grey menu-item" style="padding:13px">
						<span class="menu-icon"><i class="fa-solid fa-compass"></i></span>
						<span class="menu-text">Hành động</span>
					</a>
				</li>
				<li>
					<a class="has-text-grey menu-item" style="padding:13px">
						<span class="menu-icon"><i class="fa-solid fa-compass"></i></span>
						<span class="menu-text">Check in</span>
					</a>
				</li>
				<li>
					<a class="has-text-grey menu-item" style="padding:13px">
						<span class="menu-icon"><i class="fa-solid fa-compass"></i></span>
						<span class="menu-text">Tổng quan</span>
					</a>
				</li>
				<li>
					<a class="has-text-grey menu-item" style="padding:13px">
						<span class="menu-icon"><i class="fa-solid fa-compass"></i></span>
						<span class="menu-text">Đánh giá</span>
					</a>
				</li>
			</ul>
		</aside>
	</div>
	<div class="column has-background-light">
		<div class="level p-2 ">
			<div class="level-left">
				<div class="level-item">
					CHECK-IN OKRs
				</div>
			</div>
			<div class="level-right">
				<div class="level-item">
					<div class="control">
						<div class="select is-borderless">
							<select value="@selectedProgressFilter" @onchange="ProgressFilterChanged"
									style="box-shadow: none; border: none;" class="has-background-light has-text-link">
								<option>Tiến độ</option>
								@if (ListProgressOkrs != null && ListProgressOkrs.Any())
								{
									foreach (var item in ListProgressOkrs)
									{
										<option>@item</option>
									}
								}
							</select>

						</div>
					</div>
				</div>
				<div class="level-item">
					<div class="field has-addons">
						<p class="control has-icons-left has-icons-right" style="width: 100%;">
							<input class="input" type="text" value="@searchTerm" @oninput="SearchChanged" placeholder="Nhập gì đi bạn!"
								   style="border-radius: 30px; padding-right: 2.5em; padding-left: 2.5em;" />


							<span class="icon is-left">
								<i class="fas fa-search"></i>
							</span>
							<span class="icon is-right" @onclick="ClearSearch" style="cursor: pointer;">
								<i class="fas fa-times"></i>
							</span>
						</p>
					</div>
				</div>
				<div class="level-item">
					<div class="field is-grouped is-primary button has-text-dark" @onclick="ToggleForm">
						<div class="control ">
							<i class="fa-solid fa-plus"></i>
						</div>
						<div class="control ">
							<a class="has-text-dark">Thêm </a>
						</div>
					</div>


				</div>
			</div>
		</div>
		<div class="level pr-2 is-flex is-justify-content-end">
			<div class="level-right">
				<div class="level-item">
					<label class="checkbox">
						<input type="checkbox" checked="@showCrossLinkedOkrs" @onchange="CrossLinkedChanged" />
						Hiển thị OKRs liên kết chéo và cấp trên
					</label>
				</div>
			</div>
		</div>
		<_UpdateOks IsVisible="isFormVisible"
					IsEditMode="isEditMode"
					OkrToEdit="selectedOkr"
					IsVisibleChanged="HandleFormVisibilityChanged"
					OnSave="HandleSaveOkr" />
		<div class="box m-2">
			<table class="table" style="font-family:sans-serif; font-size:12px;">
				<thead>
					<tr>
						<th>STT</th>
						<th>Mục tiêu</th>
						<th>Thành viên liên kết</th>
						<th>Thực đạt</th>
						<th>Tiến độ</th>
						<th>Thay đổi</th>
						<th>Tự tin</th>
						<th>Check-in</th>
						<th>Trạng thái</th>
					</tr>
				</thead>
				<tbody>
					@if (ListSearchOkrs != null && ListSearchOkrs.Any())
					{
						@foreach (var okr in CurrentPageItems)
						{
							<tr>
								<td>@(CurrentPageItems.IndexOf(okr) + 1 + (currentPage - 1) * pageSize)</td>
								<td>@okr.Objective</td>
								<td>@okr.Assignee</td>
								<td>@okr.ProgressPercent%</td>
								<td>@okr.ProgressStatus</td>
								<td>@okr.Change</td>
								<td>@okr.Confidence%</td>
								<td>@okr.Checkin</td>
								<td>@okr.Status</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="8" class="has-text-centered">Không có dữ liệu OKRs</td>
						</tr>
					}
				</tbody>

			</table>
			<nav class="pagination is-centered" role="navigation" aria-label="pagination">
				<a @onclick="PreviousPage" class="pagination-previous @(currentPage == 1 ? "is-disabled" : "")"
				   style="@(currentPage == 1 ? "pointer-events: none;" : "cursor: pointer;")">
					Trước
				</a>
				<a @onclick="NextPage" class="pagination-next @(currentPage == totalPages ? "is-disabled" : "")"
				   style="@(currentPage == totalPages ? "pointer-events: none;" : "cursor: pointer;")">
					Sau
				</a>
				<ul class="pagination-list">
					@if (totalPages <= 7)
					{
						@for (int i = 1; i <= totalPages; i++)
						{
							int pageNumber = i;
							<li>
								<a @onclick="() => GoToPage(pageNumber)"
								   class="pagination-link @(currentPage == pageNumber ? "is-current" : "")"
								   aria-label="Goto page @pageNumber">
									@pageNumber
								</a>
							</li>
						}
					}
					else
					{
						<!-- First page -->
						<li>
							<a @onclick="() => GoToPage(1)"
							   class="pagination-link @(currentPage == 1 ? "is-current" : "")"
							   aria-label="Goto page 1">1</a>
						</li>

						<!-- Ellipsis if needed -->
						@if (currentPage > 3)
						{
							<li><span class="pagination-ellipsis">&hellip;</span></li>
						}

						<!-- Pages around current page -->
						@for (int i = Math.Max(2, currentPage - 1); i <= Math.Min(totalPages - 1, currentPage + 1); i++)
						{
							int pageNumber = i;
							<li>
								<a @onclick="() => GoToPage(pageNumber)"
								   class="pagination-link @(currentPage == pageNumber ? "is-current" : "")"
								   aria-label="Goto page @pageNumber">
									@pageNumber
								</a>
							</li>
						}

						<!-- Ellipsis if needed -->
						@if (currentPage < totalPages - 2)
						{
							<li><span class="pagination-ellipsis">&hellip;</span></li>
						}

						<!-- Last page -->
						<li>
							<a @onclick="() => GoToPage(totalPages)"
							   class="pagination-link @(currentPage == totalPages ? "is-current" : "")"
							   aria-label="Goto page @totalPages">
								@totalPages
							</a>
						</li>
					}
				</ul>
			</nav>

		</div>

	</div>
</div>

@code {
	private bool isMenuCollapsed = true;
	private bool isPinned = false;
	private List<Taget> ListOkrs = new();
	private List<Taget> ListSearchOkrs = new();
	private List<string> ListProgressOkrs = new();
	private int currentPage = 1;
	private int pageSize = 7;
	private bool isFormVisible = false;
	private string? itemName;
	private bool isEditMode = false;
	private Taget selectedOkr;
	// New variables for search and filter
	private string searchTerm = "";
	private string _selectedProgressFilter = "Tiến độ";
	private string selectedProgressFilter
	{
		get => _selectedProgressFilter;
		set
		{
			_selectedProgressFilter = value;
			ApplyFilters();
		}
	}

	private bool showCrossLinkedOkrs = false; // For the checkbox

	// Updated pagination calculation based on filtered results
	private int totalPages => (int)Math.Ceiling(ListSearchOkrs.Count / (double)pageSize);
	private List<Taget> CurrentPageItems => ListSearchOkrs
		.Skip((currentPage - 1) * pageSize)
		.Take(pageSize)
		.ToList();

	protected override async Task OnInitializedAsync()
	{
		ListOkrs = await okrServices.GetAllOkrsAsync();
		Onload();
	}


	private void Onload()
	{
		// Get all distinct progress statuses for the dropdown
		ListProgressOkrs = ListOkrs.Select(okr => okr.ProgressStatus).Distinct().ToList();

		// Initialize the filtered list with all OKRs
		ListSearchOkrs = ListOkrs.ToList();
	}


	private void ToggleMenu()
	{

		if (!isPinned)
		{
			isMenuCollapsed = !isMenuCollapsed;
		}
	}


	private void TogglePin()
	{
		isPinned = !isPinned;
		if (isPinned)
		{
			isMenuCollapsed = false;
		}
		else
		{
			isMenuCollapsed = true;
		}
	}


	private void GoToPage(int page)
	{
		if (page >= 1 && page <= totalPages)
		{
			currentPage = page;
		}
	}


	private void PreviousPage()
	{
		if (currentPage > 1)
		{
			currentPage--;
		}
	}


	private void NextPage()
	{
		if (currentPage < totalPages)
		{
			currentPage++;
		}
	}


	private void ApplyFilters()
	{
		// Start with all OKRs
		var filteredList = ListOkrs.ToList();

		// Apply search filter
		if (!string.IsNullOrWhiteSpace(searchTerm))
		{
			string term = searchTerm.ToLower();
			filteredList = filteredList.Where(okr =>
				okr.Objective.ToLower().Contains(term) ||
				okr.Assignee.ToLower().Contains(term)
			).ToList();
		}

		// Apply progress status filter
		if (selectedProgressFilter != "Tiến độ")
		{
			filteredList = filteredList.Where(okr =>
				okr.ProgressStatus == selectedProgressFilter
			).ToList();
		}

		// Apply cross-linked OKRs filter
		if (showCrossLinkedOkrs)
		{
			// Add your logic for cross-linked OKRs
		}

		// Update the filtered list
		ListSearchOkrs = filteredList;

		// Reset to first page when filters change
		currentPage = 1;
	}


	private void ClearSearch()
	{
		searchTerm = "";
		ApplyFilters();
	}


	private void SearchChanged(ChangeEventArgs e)
	{
		searchTerm = e.Value.ToString();
		ApplyFilters();
	}


	private void CrossLinkedChanged(ChangeEventArgs e)
	{
		showCrossLinkedOkrs = (bool)e.Value;
		ApplyFilters();
	}


	private void ProgressFilterChanged(ChangeEventArgs e)
	{
		selectedProgressFilter = e.Value.ToString();
		ApplyFilters();
	}
	private void OpenAddForm()
	{
		isEditMode = false;
		selectedOkr = null;
		isFormVisible = true;
	}

	// Mở form sửa
	private void OpenEditForm(Taget okr)
	{
		isEditMode = true;
		selectedOkr = okr;
		isFormVisible = true;
	}

	// Xử lý đóng form
	private void HandleFormVisibilityChanged(bool value)
	{
		isFormVisible = value;
	}

	// Xử lý lưu OKR
	private async Task HandleSaveOkr(Taget okr)
	{
		if (isEditMode)
		{
			// Cập nhật OKR hiện có
			await okrServices.UpdateOkrAsync(okr);

			// Cập nhật danh sách hiển thị
			var index = ListOkrs.FindIndex(o => o.Id == okr.Id);
			if (index >= 0)
			{
				ListOkrs[index] = okr;
			}
		}
		else
		{
			// Thêm OKR mới
			var newOkr = await okrServices.AddOkrAsync(okr);
			ListOkrs.Add(newOkr);
		}

		// Cập nhật danh sách hiển thị
		ApplyFilters();

		// Đóng form
		isFormVisible = false;
	}
	private void ToggleForm()
	{
		isFormVisible = !isFormVisible;
	}

	private async Task HandleSaveItem(string name)
	{
		// Xử lý lưu dữ liệu ở đây
		Console.WriteLine($"Đã lưu: {name}");

		// Tạo OKR mới và thêm vào danh sách
		// Ví dụ:
		// var newOkr = new Taget { Objective = name, ... };
		// await okrServices.AddOkrAsync(newOkr);
		// ListOkrs.Add(newOkr);

		// Cập nhật danh sách hiển thị
		// ApplyFilters();

		// Tắt form sau khi lưu
		isFormVisible = false;
	}
}
